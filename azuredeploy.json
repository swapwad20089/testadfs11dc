{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "The region to deploy the resources into, e.g. East US."
      }
    },
    "storageAccountType": {
      "type": "string",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "Standard_GRS"
      ],
      "metadata": {
        "description": "The type of the Storage Account created"
      },
      "defaultValue": "Premium_LRS"
    },
    "virtualNetworkUsage": {
      "type": "string",
      "metadata": {
        "description": "Indicates if a new virtual network will be created or use an existing one."
      },
      "allowedValues": [
        "existing",
        "new"
      ],
      "defaultValue": "new"
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Virtual Network to Create, mandatory on both existing or new virtual network usage."
      },
      "defaultValue": "adfs-infra-vnet"
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the resource group where the existing virtual network resides. When using an existing virtual network, this becomes a mandatory parameter so the deployment can find the ID of the existing virtual network."
      },
      "defaultValue": "n/a"
    },
    "virtualNetworkAddressRange": {
      "type": "string",
      "metadata": {
        "description": "The address range of the new VNET, mandatory if creating a new virtual network."
      },
      "defaultValue": "10.0.0.0/16"
    },
    "internalSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the internal subnet, mandatory on both virtual network usage options (new or existing)."
      },
      "defaultValue": "Internal-sn"
    },
    "internalSubnetAddressRange": {
      "type": "string",
      "metadata": {
        "description": "The address range of the internal subnet, which contains the Domain Controllers and ADFS servers, mandatory if creating a new virtual network."
      },
      "defaultValue": "10.0.0.0/24"
    },
    "dmzSubnetAddressRange": {
      "type": "string",
      "metadata": {
        "description": "The address range of the dmz subnet, which contains the Windows application proxy servers, mandatory if creating a new virtual network."
      },
      "defaultValue": "10.0.1.0/24"
    },
    "dmzSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the internal subnet, mandatory on both virtual network usage options (new or existing)."
      },
      "defaultValue": "DMZ-sn"
    },
    "addc01servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver1"
    },
    "addc02servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver2"
    },
    "addc03servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver3"
    },
    "addc04servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver4"
    },
    "addc05servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver5"
    },
    "addc06servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver6"
    },
    "addc07servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver7"
    },
    "addc08servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver8"
    },
    "addc09servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver9"
    },
    "addc10servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver10"
    },
    "addc11servername": {
      "type": "string",
      "metadata": {
        "description": "Name of Domain Controller, this name will be statically assigned to the DC and must be a valid name."
      },
      "defaultValue": "addcserver11"
    },
    "addc01NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.101"
    },
    "addc02NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the second Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.102"
    },
    "addc03NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.103"
    },
    "addc04NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.104"
    },
    "addc05NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.105"
    },
    "addc06NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.106"
    },
    "addc07NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.107"
    },
    "addc08NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.108"
    },
    "addc09NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.109"
    },
    "addc10NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.110"
    },
    "addc11NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first Domain Controller, this IP address will be statically assigned to the DC and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.111"
    },
    "adfs01NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first ADFS server, this IP address will be statically assigned to the ADFS server and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.201"
    },
    "adfs02NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the second ADFS server, this IP address will be statically assigned to the ADFS server and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.202"
    },
    "wap01NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the first WAP server, this IP address will be statically assigned to the WAP server and must be a valid ip address within the DMZ subnet."
      },
      "defaultValue": "10.0.1.101"
    },
    "wap02NicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the second WAP server, this IP address will be statically assigned to the WAP server and must be a valid ip address within the DMZ subnet."
      },
      "defaultValue": "10.0.1.102"
    },
    "adfsLoadBalancerPrivateIpAddress": {
      "type": "string",
      "metadata": {
        "description": "The internal IP address of the ADFS load balancer, this IP address will be statically assigned to the load balancer and must be a valid ip address within the Internal subnet."
      },
      "defaultValue": "10.0.0.200"
    },
    "adfs01servername": {
      "type": "string",
      "metadata": {
        "description": "Name of ADFS server, this name will be statically assigned to the ADFS server and must be a valid name."
      },
      "defaultValue": "adfsserver1"
    },
    "adfs02servername": {
      "type": "string",
      "metadata": {
        "description": "Name of ADFS server, this name will be statically assigned to the ADFS server and must be a valid name."
      },
      "defaultValue": "adfsserver2"
    },
    "wap01servername": {
      "type": "string",
      "metadata": {
        "description": "Virtual Machine name prefix for WAP servers"
      },
      "defaultValue": "wapserver1"
    },
    "wap02servername": {
      "type": "string",
      "metadata": {
        "description": "Virtual Machine name prefix for WAP servers"
      },
      "defaultValue": "wapserver2"
    },
    "addcVMsSize": {
      "type": "string",
      "metadata": {
        "description": "The vm size of the Domain Controllers"
      },
      "defaultValue": "Standard_DS2_V2"
    },
    "adfsVMsSize": {
      "type": "string",
      "metadata": {
        "description": "The vm size of the ADFS servers"
      },
      "defaultValue": "Standard_DS2_V2"
    },
    "wapVMsSize": {
      "type": "string",
      "metadata": {
        "description": "The vm size of the WAP servers"
      },
      "defaultValue": "Standard_DS2_v2"
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "The name of the local Administrator of the virtual machines"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 12,
      "maxLength": 40,
      "metadata": {
        "description": "The password for the local Administrator account of the virtual machines"
      }
    }
  },
  "variables": {
    "baseUrl": "https://raw.githubusercontent.com/swapwad20089/testadfs11dc/master/",
    "storageAccountNamePrefix": "[concat(uniquestring(resourceGroup().id),'strgac')]",
    "deployStorageAccountsUrl": "[concat(variables('baseUrl'),'/deployStorageAccounts.json')]",
    "deployPublicIPsUrl": "[concat(variables('baseUrl'),'/deployPublicIPs.json')]",
    "publicIpName": "wapLbPip",
    "publicIPAddressType": "Static",
    "deployAvailabilitySetsUrl": "[concat(variables('baseUrl'),'/deployAvailabilitySets.json')]",
    "availabilitySetNames": [
      "adfssrv-as",
      "wapsrv-as"
    ],
    "deployVnetURL": "[concat(variables('baseUrl'),'/vnet-',parameters('virtualNetworkUsage'),'.json')]",
    "subnets": [
      {
        "name": "[parameters('internalSubnetName')]",
        "properties": {
          "addressPrefix": "[parameters('internalSubnetAddressRange')]",
          "networkSecurityGroup": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups','Internal-sn-nsg')]"
          }
        }
      },
      {
        "name": "[parameters('dmzSubnetName')]",
        "properties": {
          "addressPrefix": "[parameters('dmzSubnetAddressRange')]",
          "networkSecurityGroup": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups','DMZ-sn-nsg')]"
          }
        }
      }
    ],
    "deployLoadBalancersUrl": "[concat(variables('baseUrl'),'/deployLoadBalancers.json')]",
    "loadBalancerNames": [
      "adfs-loadbal",
      "wap-loadbal"
    ],
    "lbfe": "loadbalfrontend",
    "lbbe": "loadbalbackend",
    "rdpNats": [
      "rdpWap01",
      "rdpWap02"
    ],
    "lbPublicIpResourceIds": [
      "[resourceId(concat('Microsoft.Network','/','publicIPAddresses'),variables('publicIpName'))]"
    ],
    "deployNicsUrl": "[concat(variables('baseUrl'),'/deployNics2.json')]",
    "deployNsgsUrl": "[concat(variables('baseUrl'),'/deployNsgs.json')]",
    "deploydcUrl": "[concat(variables('baseUrl'),'/deploydc.json')]",
    "deployVmsUrl": "[concat(variables('baseUrl'),'/deployVms.json')]",
    "deployadfsVmsUrl": "[concat(variables('baseUrl'),'/deployadfsvms.json')]",
    "deploywapVmsUrl": "[concat(variables('baseUrl'),'/deploywapvms.json')]"
  },
  "resources": [
    {
      "name": "storageAccountDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deployStorageAccountsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountType": {
            "value": "[parameters('storageAccountType')]"
          },
          "storageAccountNamePrefix": {
            "value": "[variables('storageAccountNamePrefix')]"
          }
        }
      }
    },
    {
      "name": "publicIpAddressesDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deployPublicIPsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "publicIpName": {
            "value": "[variables('publicIpName')]"
          },
          "publicIPAddressType": {
            "value": "[variables('publicIPAddressType')]"
          }
        }
      }
    },
    {
      "name": "availabilitySetsDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deployAvailabilitySetsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilitySetNames": {
            "value": "[variables('availabilitySetNames')]"
          }
        }
      }
    },
    {
      "name": "virtualNetworkDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/nsgDeployment"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deployVnetURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[parameters('virtualNetworkAddressRange')]"
          },
          "subnets": {
            "value": "[variables('subnets')]"
          },
          "resourceGroupName": {
            "value": "[parameters('virtualNetworkResourceGroupName')]"
          }
        }
      }
    },
    {
      "name": "loadBalancerDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/virtualNetworkDeployment",
        "Microsoft.Resources/deployments/publicIpAddressesDeployment"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deployLoadBalancersUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "loadBalancerNames": {
            "value": "[variables('loadBalancerNames')]"
          },
          "lbfe": {
            "value": "[variables('lbfe')]"
          },
          "lbbe": {
            "value": "[variables('lbbe')]"
          },
          "rdpNats": {
            "value": "[variables('rdpNats')]"
          },
          "lbPublicIpResourceIds": {
            "value": "[variables('lbPublicIpResourceIds')]"
          },
          "subnetIds": {
            "value": [
              "[concat(reference('virtualNetworkDeployment').outputs.vnetId.value,'/subnets/',parameters('internalSubnetName'))]",
              "[concat(reference('virtualNetworkDeployment').outputs.vnetId.value,'/subnets/',parameters('dmzSubnetName'))]"
            ]
          },
          "adfsLoadBalancerPrivateIpAddress": {
            "value": "[parameters('adfsLoadBalancerPrivateIpAddress')]"
          }
        }
      }
    },
    {
      "name": "nicsDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/virtualNetworkDeployment",
        "Microsoft.Resources/deployments/loadBalancerDeployment",
        "Microsoft.Resources/deployments/availabilitySetsDeployment"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deployNicsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "ipAddresses": {
            "value": [
              "[parameters('addc01NicIPAddress')]",
              "[parameters('addc02NicIPAddress')]",
              "[parameters('addc03NicIPAddress')]",
              "[parameters('addc04NicIPAddress')]",
              "[parameters('addc05NicIPAddress')]",
              "[parameters('addc06NicIPAddress')]",
              "[parameters('addc07NicIPAddress')]",
              "[parameters('addc08NicIPAddress')]",
              "[parameters('addc09NicIPAddress')]",
              "[parameters('addc10NicIPAddress')]",
              "[parameters('addc11NicIPAddress')]",
              "[parameters('adfs01NicIPAddress')]",
              "[parameters('adfs02NicIPAddress')]"
            ]
          },
          "ipwapaddresses": {
            "value": [
              "[parameters('wap01NicIPAddress')]",
              "[parameters('wap02NicIPAddress')]"
            ]
          },
          "nicNames": {
            "value": [
              "[concat(parameters('addc01servername'),'1-nic')]",
              "[concat(parameters('addc02servername'),'1-nic')]",
              "[concat(parameters('addc03servername'),'1-nic')]",
              "[concat(parameters('addc04servername'),'1-nic')]",
              "[concat(parameters('addc05servername'),'1-nic')]",
              "[concat(parameters('addc06servername'),'1-nic')]",
              "[concat(parameters('addc07servername'),'1-nic')]",
              "[concat(parameters('addc08servername'),'1-nic')]",
              "[concat(parameters('addc09servername'),'1-nic')]",
              "[concat(parameters('addc10servername'),'1-nic')]",
              "[concat(parameters('addc11servername'),'1-nic')]",
              "[concat(parameters('adfs01servername'),'1-nic')]",
              "[concat(parameters('adfs02servername'),'1-nic')]"
            ]
          },
          "nicwapNames": {
            "value": [
              "[concat(parameters('wap01servername'),'1-nic')]",
              "[concat(parameters('wap02servername'),'1-nic')]"
            ]
          },
          "subnetIds": {
            "value": [
              "[concat(reference('virtualNetworkDeployment').outputs.vnetId.value,'/subnets/',parameters('internalSubnetName'))]",
              "[concat(reference('virtualNetworkDeployment').outputs.vnetId.value,'/subnets/',parameters('dmzSubnetName'))]"
            ]
          },
          "adfsBEAddressPoolID": {
            "value": "[concat(reference('loadBalancerDeployment').outputs.adfslbID.value,'/backendAddressPools/',variables('lbbe'))]"
          },
          "wapRDPNATRuleIDs": {
            "value": [
              "[concat(reference('loadBalancerDeployment').outputs.waplbID.value,'/inboundNatRules/',variables('rdpNats')[0])]",
              "[concat(reference('loadBalancerDeployment').outputs.waplbID.value,'/inboundNatRules/',variables('rdpNats')[1])]"
            ]
          },
          "wapBeAddressPoolID": {
            "value": "[concat(reference('loadBalancerDeployment').outputs.waplbID.value,'/backendAddressPools/',variables('lbbe'))]"
          }
        }
      }
    },
    {
      "name": "nsgDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deployNsgsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "dmzSubnetAddressRange": {
            "value": "[parameters('dmzSubnetAddressRange')]"
          },
          "internalSubnetAddressRange": {
            "value": "[parameters('internalSubnetAddressRange')]"
          }
        }
      }
    },
    {
      "name": "addcVmsDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/nicsDeployment"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deployVmsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "vmdcNamePrefix": {
            "value": [
              "[parameters('addc01servername')]",
              "[parameters('addc02servername')]",
              "[parameters('addc03servername')]",
              "[parameters('addc04servername')]",
              "[parameters('addc05servername')]",
              "[parameters('addc06servername')]",
              "[parameters('addc07servername')]",
              "[parameters('addc08servername')]",
              "[parameters('addc09servername')]",
              "[parameters('addc10servername')]",
              "[parameters('addc11servername')]"
            ]
          },
          "vmSize": {
            "value": "[parameters('addcVMsSize')]"
          },
          "storageAccountNamePrefix": {
            "value": "[variables('storageAccountNamePrefix')]"
          }
        }
      }
    },
    {
      "name": "adfsVmsDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/nicsDeployment"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deployadfsVmsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "vmadfsNamePrefix": {
                  "value": [
              "[parameters('adfs01servername')]",
              "[parameters('adfs02servername')]"
            ]
           },
          "vmSize": {
            "value": "[parameters('adfsVMsSize')]"
          },
          "availabilitySetName": {
            "value": "[variables('availabilitySetNames')[0]]"
          },
          "storageAccountNamePrefix": {
            "value": "[variables('storageAccountNamePrefix')]"
          }
        }
      }
    },
    {
      "name": "wapVmsDeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/nicsDeployment"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deploywapVmsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "vmwapNamePrefix": {
            "value": [
              "[parameters('wap01servername')]",
              "[parameters('wap02servername')]"
            ]
          },
          "vmSize": {
            "value": "[parameters('wapVMsSize')]"
          },
          "availabilitySetName": {
            "value": "[variables('availabilitySetNames')[1]]"
          },
          "storageAccountNamePrefix": {
            "value": "[variables('storageAccountNamePrefix')]"
          }
        }
      }
    }, 
  ]
}
